Alex Chantavy proudly presents

PolygonIllustrator and Triangulator

Version: 1.5
Release Date: May 23, 2010
Working Executable Example located at 
http://www2.hawaii.edu/~chantavy/ics311/assignments/a4
JavaDoc located at 
http://www2.hawaii.edu/~chantavy/ics311/assignments/a4/doc/
License: BSD License
http://opensource.org/licenses/bsd-license.php

Special Features:
+  Progress bar:  User knows how far along the algorithm is in execution
+  Cancel button: User may halt execution of the algorithm
+  Scale factor drawing: User may adjust how large they want the polygon to be
displayed.
+  Preset tests: Comes with 3 specified test URLs
+  Labeled vertices: All vertices are drawn with numbers in the same order 
they are specified in the text file
+  Clear colors: All chords drawn as dotted lines, optimal triangulation drawn
in bold lines

Overview:
This package contains the software implementation of assignment 4, 
where the goal was to find a polygon triangulation such that maximum
length chord was minized.
A full specification of assignment 3 may be found here:
(http://www2.hawaii.edu/~sugihara/course/ics311s10/assign4.html)
This software is implemented as a Java applet and will compile   
on a system running JDK 1.5.0.

Algorithm Used:
    The algorithm used was an EXHAUSTIVE SEARCH designed by Alex Chantavy.  
The algorithm executes in the following manner:
1. Generate all possible chords of the polygon
2. In an array A, sort the chords from least to greatest with respect to length.
3. Let s = the size of array A.
4. Pick the n-3 chords A[0], A[1], A[2], ... , A[n-3 -1].  Determine if this set 
constitutes a noncrossing set.  
5. If yes, we are done.
6. If no, let i = n-3.  For i = n-3 to i = s, generate all possible combinations of
chords where A[i] is the maximum length chord until our set contains n-3 chords.
This is our optimal triangulation.

Functionality:
    This applet reads in the URL of a text file representing a polygon.  
Before opening a connection to the URL, the applet first performs
input sanitization, verifying the syntax of the URL in order to prevent 
against injection attack.

    The format of the polygon file is specified as follows:    
 
    + The first line indicates the number of vertices of the polygon in decimal.

    + Starting from the second, each of the subsequent lines includes
      2 positive integers x and y in decimal that are delimited  
      by a tab \t, where x and y are coordinates for each vertex of the polygon.

    After reading the polygon file, the applet draws the polygon in the 
graphics pane.
    After successful illustration, the user may push a button to execute an 
algorithm to find the optimum set of chords.  Upon successful calculation,
the applet attempts to draw the chords of the polygon on top of the 
existing polygon in the graphics pane.

Acknowledgements:
I. This work uses Jon Lai's a4 extra credit assignment for graphics 
functionality.  (Original source file name: Polygon_drawing01.tar)

II.  Credit goes to Michael Gilleland for his CombinationGenerator class.  
URL: http://www.merriampark.com/comb.htm 

III.  Computational Geometry by Joseph O'Rourke (1994) Cambridge University Press
provided very helpful definitions and code to determine whether a line
segment is internal to a polygon.

IV. Introduction to Algorithms by Cormen, Leiserson, Rivest, and Stein 3rd Edition 
provided algorithms to compute cross products and line intersections

Known Problems:
This product does not compile on UHUnix because it uses SwingWorker to manage thread 
execution, which requires JDK 1.6  UHUnix only has JDK 1.5.  Instructions on how to manage
this problem are included in the next section of this document.
Jon Lai's VerifyStrings.java gives many errors in compilation.  Also, the algorithm
used is very slow for n > 16.  In a future release, it may be possible to work in 
Robert Kim's binary search idea.  

Installation:
PolygonIllustrator requires JDK 1.6 or higher.  Because UHUnix only has JDK 1.5, 
PolygonIllustrator will not compile on UHUnix.  We offer two methods to get around
this problem.  Method one involves using precompiled class files, and method two 
involves compiling the source on your own JDK 1.6 computer.

Method One: Download a tarball of the compiled class files
Required: UHUnix account, knowledge of Unix
1.  Download: http://www2.hawaii.edu/~chantavy/ics311/assignments/a4/a4_classfiles.tar.gz

2. Copy a4_classfiles.tar.gz to a directory on uhunix with 
    % scp a4_classfiles.tar.gz <username>@uhunix.hawaii.edu:<path>
    where <username> is your uhunix username and 
    <path> is a path to the directory where you want a4_7148.tar.gz to be.

3. Log into uhunix via SSH:
    % ssh <username>@uhunix.hawaii.edu

4. Change to the directory containing a4_classfiles.tar.gz
    % cd <path>

5. Unzip and extract:
    % gunzip a4_classfiles.tar.gz
    % tar xvf a4_classfiles.tar

6. Change permissions for all necessary files:
    % chmod 777 a4
    % cd a4
    % chmod 644 *.html
    % chmod 777 alexchantavy
    % cd alexchantavy
    % chmod 755 *.class
    
7. Done! Go to a browser and enter the URL for index.html
    
Method Two: Compile source files on desktop computer and upload to UHUnix
Required: Computer with JDK 1.6 or higher, UHUnix account, Unix knowledge
1.  Extract the included a4_7148.tar.gz contents to a directory on your computer
    % gunzip a4_7148.tar.gz
    % tar xvf a4_7148.tar

2. Change permissions
    % chmod 777 a4
    
3. Compile using included makefile script.
    % cd a4
    % chmod 777 makefile
    % make
    
4. Pack up the compiled files in a tarball.
    % cd ..
    % tar -cvf a4_classfiles.tar a4/
    % gzip -c a4_classfiles.tar > a4_classfiles.tar.gz
    
5. Follow steps 2-7 of METHOD ONE.

Revision History:
Version 1.5    -    5/23/2010: Second Release
                    Huge update: now using my own algorithm, UI overhauled with MANY
                    new features -> progress bars, cancel button, exhaustive algorithm,
                    etc etc etc :)  Only problem is that the user install could 
                    definitely be easier.  Shame that JDK 1.6 isn't available on UHUnix.
Version 0.8    -    5/14/2010: First release