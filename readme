PolygonIllustrator and Triangulator

Release Date: May 23, 2010
License: BSD License
http://opensource.org/licenses/bsd-license.php

Overview:
This package contains the software implementation of assignment 4, 
where the goal was to find a polygon triangulation such that maximum
length chord was minized.
A full specification of assignment 3 may be found here:
(http://www2.hawaii.edu/~sugihara/course/ics311s10/assign4.html)
This software is implemented as a Java applet and will compile   
on a system running JDK 1.5.0.

Algorithm Used:
    The algorithm used was an EXHAUSTIVE SEARCH:
1. Generate all possible chords of the polygon
2. In an array A, sort the chords from least to greatest with respect to length.
3. Let s = the size of array A.
4. Pick the n-3 chords A[0], A[1], A[2], ... , A[n-3 -1].  Determine if this set 
constitutes a noncrossing set.  
5. If yes, we are done.
6. If no, let i = n-3.  For i = n-3 to i = s, generate all possible combinations of
chords where A[i] is the maximum length chord until our set contains n-3 chords.
This is our optimal triangulation.

Functionality:
    This applet reads in the URL of a text file representing a polygon.  
Before opening a connection to the URL, the applet first performs
input sanitization, verifying the syntax of the URL in order to prevent 
against injection attack.

    The format of the polygon file is specified as follows:    
 
    + The first line indicates the number of vertices of the polygon in decimal.

    + Starting from the second, each of the subsequent lines includes
      2 positive integers x and y in decimal that are delimited  
      by a tab \t, where x and y are coordinates for each vertex of the polygon.

    After reading the polygon file, the applet draws the polygon in the 
graphics pane.
    After successful illustration, the user may push a button to execute an 
algorithm to find the optimum set of chords.  Upon successful calculation,
the applet attempts to draw the chords of the polygon on top of the 
existing polygon in the graphics pane.

Acknowledgements:
I. Graphics functionality by Jon Lai.  

II.  Credit goes to Michael Gilleland for his CombinationGenerator class.  
URL: http://www.merriampark.com/comb.htm 

III.  Computational Geometry by Joseph O'Rourke (1994) Cambridge University Press
provided very helpful definitions and code to determine whether a line
segment is internal to a polygon.

IV. Introduction to Algorithms by Cormen, Leiserson, Rivest, and Stein 3rd Edition 
provided algorithms to compute cross products and line intersections

Installation:
Requires JDK 1.6 or higher.  

UI stuff I'm happy about:
+  Progress bar:  User knows how far along the algorithm is in execution
+  Cancel button: User may halt execution of the algorithm
+  Scale factor drawing: User may adjust how large they want the polygon to be
displayed.
+  Preset tests: Comes with 3 specified test URLs (not working anymore, it's been 
years :S )
+  Labeled vertices: All vertices are drawn with numbers in the same order 
they are specified in the text file
+  Clear colors: All chords drawn as dotted lines, optimal triangulation drawn
in bold lines


Revision History:
Version 1.5    -    5/23/2010: Second Release
                    Huge update: now using my own algorithm, UI overhauled with MANY
                    new features -> progress bars, cancel button, exhaustive algorithm,
                    etc etc etc :)  Only problem is that the user install could 
                    definitely be easier.  Shame that JDK 1.6 isn't available on UHUnix.
Version 0.8    -    5/14/2010: First release